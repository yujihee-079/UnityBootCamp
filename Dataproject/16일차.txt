16일차


LifeCycleTester.cs
Life Cycle Tester에 연결

실행하고 비활성화 될 경우 에디터를 활용해 에디터쪽에서
비활성화 -> 활성화로 바꿔야 다음 작업이 처리됩니다.

2교시 : 플레이어 프립스 사용
PlayerPrefsTester.cs 생성

3교시 
화면에 텍스트로 점수가 표현됩니다.
약 1분 동안 게임이 지속됩니다.

Mathf.CeilToInt(float f);
float 형태의 값을 올림 처리해서 정수 형태로 변환하는 코드
일반적으로 게임에서의 남은 시간은 남은 초를 기준으로 올림해서 보여줌.

--------------------------------------------------------

Time.timeScale : 씬에서의 시간 비율을 의미합니다.
기본적으로 해당 값은 1로 설정되어 있습니다.
2로 바꾸면 시간이 2배로  빠르게 흐르도록 처리됩니다.
(움직임,애니메이션,물리도 2배로 처리됨)
0으로 설정할 경우라면 멈춤.
해당 값은 Time.deltaTime 값이 영향을 받게 됩니다.

오브젝트를 클릭할 때마다 점수가 1점씩
상승합니다.

게임이 끝나면 점수가 출력됩니다.
(더이상 클릭해도 점수가 오르지 않습니다.)

점수가 최고 점수 기록을 넘었을 경우
그 점수가 최고 점수가 됩니다.

버튼을 다시하기 버튼을 누르면, 다시 시작 기능을 통해 씬을 다시 호출합니다.
버튼을 종료하기 버튼을 누르면 UnityEditor.EditorApplication.isPlaying = false


Resources 폴더 생성

해당 폴더는 유니티에서 
Resources.Load 기능을 통해
런타임에서 에셋을 로드할 수 있게 해주는 특수 폴더입니다

해당 폴더에 너무 많은 양의 에셋이 존재한다면
성능에 영향을 줄 수 있습니다. --> 간단한 기능만.

정말 필요한 리소스만 해당 폴더에 직접 배치하고,
Addressable 등을 통한 동적으로 리소스 다운로드를 
시도합니다. ( 대용량의 경우 )

json파일 내부 작업 방법
1. 객체
{"key" : " value" ... }

2. 배열(array)
{값, 값1,,,,}

3. string. number( int/float ). Boolean null....
JsonTexter.cs 생성

4. Json 파일을 생성하고 저장하는 기능
JsonMaker.cs

5. Json 파일을 불러오는 기능

6. Scriptable Object 사용방법

SOMaker.cs (아이템 형태 (스크립터블 오브젝트)
ItemTester.cs (아이템 사용)
------------------------------------------------
{
    "hp": 100,
    "atk": 50,
    "def": 5,
    "items": [ "potion(R)", "potion(B)" ],
    "position": {
        "x": 1.0,
        "y": 5.0
    },
    "Quest": null,
    "isDead" :  false



하나의 묶음 == 스코프 == 중괄호,
}
// 주석을 달지 않는다.

---------------------------------------------------------
각 데이터 별 정리

Json
외부 텍스트 파일 형태로 저장 관리 기능
에디터와 런타임 모두 사용이 가능한 데이터
데이터 구조가 자유로운 편
ex) 세이브 데이터, 서버 통신용 데이터(DB 연동),
수시로 바뀌는 동적인 데이터


SO
유니티 에셋(파일) 형태로 프로젝트 내부에 저장
에디터와 굉장히 친화적인 데이터
수정사항이 바로 반영되고, 런타임에
빠르게 로드하고 참조도 가능 (메모리 효율 높음)
정적인 데이터 구현
Ex) 고정형 데이터
 아이템, 퀘스트 몬스터 스킬


PlayerPrefs
유니티가 제공하는 키-값 저장소
레지스트리, XML, Plist 등 내부에 저장되는 방식

-볼륨, 퀘스트 완료 여부, 캐릭터 상태, 환경 설정

================================

데이터 연습 문제

StartScene을 생성합니다.(시작 메뉴)
NextScene을 생성합니다.(로그인 성공)

┌─────────────────┐
│                게임 이름               R   │
│                                               │
│                새로 하기                   │
│                이어서 하기                │
│                     종료                     │
  ─────────────────

1. 새로 하기를 누를 경우 기존의 캐릭터의 정보가 제거됩니다.
2. 새로 하기를 누르면 창이 뜨면서 캐릭터에 대한 설정을
    고를 수 있습니다.
3.  확인 버튼을 누르면 캐릭터의 생성이 완료되며 새 씬으로
    이동됩니다. 해당 씬에서는 캐릭터의 로그인을 알리는 메세지가
    출력됩니다.(UI / Debug 중 원하는 걸로)
4. 이어 하기의 경우는 캐릭터 정보가 없는 경우라면 비활성화됩니다.
5. 이어 하기에 성공하면 바로 씬으로 이동됩니다.
6. R을 누를 경우 저장되어있는 캐릭터의 정보가 제거됩니다.


























