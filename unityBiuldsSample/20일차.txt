프로젝트 명 3D
UnityBuildsSample
1교시 : 이벤트, 인터페이스 복습
Scripts 폴더 생성
 - EventSample.cs 파일 생성

문제)
player?.Move();에 대해서 설명하시오.

플레이어가 null이 아닌 경우에만
Move를 호출합니다.

null이라면? 오류가 발생한다 vs 무반응


빈 오브젝트 생성 이후
EventSample 등록
EventSample2.cs 생성

씬의 GameObject에 두 코드를
연결하고 실행해 결과를 확인합니다.
---------------------------------------------------------------
2교시 : 유니티 Event, EventArgs 사용해보기

EventSample3.cs 파일 생성

이 다양한 delegate들을
언제 어떤걸 사용해야하는가..?
--------------------------------------------------------------------
고성능을 원한다 --> c# delegate

콜백	         --> Action, UnityAction

UnityEvent와의   --> UnityAction
인스펙터 연결

이벤트 시그니처  -->  delegate, Func, Action
필요(유연하게 설계)
--------------------------------------------------------------------

이벤트 시그니처 :
호출되는지에 정의한 함수의 형태
C#의 EventHandler의 선언
ex) delegate void EventHandler(object sender, EventArgs e);
//시그니처
//1. 반환 타입 (void)
//2. 매개변수 (object, EventArgs)
--------------------------------------------------------------------
EventSample4.cs

3교시 : 이벤트를 활용한 실습

(숫자, 리스트, 배열 등에서 하나를 선택한다.)
버튼을 눌러서 뽑기를 진행합니다.
(숫자 1 ~ 10)

특정 번호를 뽑앗을 경우
UI 창에서 아이템 획득에 대한 메세지를
알리는 이벤트를 구현합니다.

뽑기는 Debug 창에 출력됩니다.
----------------------------------------------------
4교시 패키지 사용, 빌드, 로고, 스플래툰

패키지)
유니티의 패키지는 프로젝트에 필요한
기능, 라이브러리, 툴, 애셋들을 모아서
재사용하는 배포 단위를 의미합니다.

패키지 사용 방법
1. Asset Store에 있는 애셋을 다운받아서
사용한다.

2. Unity Registry(유니티 레지스트리)
유니티가 제공해주는 패키지가 보관되어
있는 곳으로, 템플릿에 따라 AR, VR,
2D, 3D가 기본적으로 설정되어있으며
추가되지 않은 부분은 레지스트리에서
Install을 통해 기능을 추가할 수 있습니다.

자주 사용되는 유니티 공식 패키지
1. Cinemachine : 카메라 연출 도구
2. TextMeshPro : 텍스트 렌더링의 고품질 제공
3. Input System : 입력에 대한 액션 제공
4. Addressables : 에셋에 대한 관리 시스템
                       다운로드(로딩)

사용 방법
Import
 : 가지고 있는 패키지를 불러오는 자작업
 : 유니티 에디터에서는 custom package(별도의 패키지)
  를 import하는 기능과, 에셋 스토어에서 다운받은 파일
  , 유니티 레지스트리 쪽에서 install하고 import하는
   기능으로 나뉩니다.

Export
 : 현재 프로젝트에 있는 값들을 패키지로 만드는
   작업
Asset -> Export Package

------------------------------------------------------
유니티 패키지의 내부 구조
패키지에 대한 메타데이터(.json)
README.md (패키지에 대한 설명)
라이센스
버전 변경 기록
예시 샘플(씬이나 코드)
런타임 : 스크립트, 에셋
에디터 : 에디터 전용 코드
테스트 : 테스트 전용 코드

패키지 경로
- 프로젝트 폴더 내부
- 외부 Git 패키지

패키지의 사용 목적
1. 재사용
 -커스텀 UI, Json 데이터 매니저,
  서버 DB 연동, 공용 스크립트

2. 에디터와 런타임 코드의 분리 보관

3. 버전 관리 용도로 쓰기 괜찮다.
-> 특정 버전에 대한 고정
--------------------------------------------------------

유니티 빌드 프로파일

Scene List를 통해서 현재 열려 있는 씬의 목록을 설정할
수 있습니다.

플랫폼 설정을 진행할 수 있습니다.

플랫폼에 대한 설치 작업은 필요합니다.
(유니티 허브에서의 Install)


**Player Settings를 통해 해상도, 아이콘, 로고, 스플래시 이미지
,회사명, 버전 명 등 게임 프로젝트에 필요한 설정들을 진행할 수 있습니다.

**Add Build Profile을 통해 플랫폼 별 빌드의 구성을
저장, 관리할 수 잇습니다.

추가한 프로파일에서 설정할 수 있는 값
*Override Global Scene List
해당 기능을 체크할 경우 현재의 빌드 프로파일에서
자체적으로 빌드할 씬 목록만 등록할 수 있습니다.

이 기능으로 할 만한 작업?

>> 데모 버전 빌드
(완성된 씬 중에서 메인만 포함시키고, 다른 씬 제외)

>> 특정 기능 테스트를 위한 빌드

>> 서로 다른 시작 씬을 가지는 상황에 대한 빌드도 가능

*Scripting Defines
C#코드에서의 전처리기 정의를 설정합니다.

c# preprocessor (전처리기)

컴파일에 코드의 일부를 조건적으로 포함시키거나 제외
시키는 용도로 사용되는 먼저 처리는
기능들로 의미합니다.

# + 영단어로 구성되어 있음.

ex) #region

symbol 심볼 : 조건부 컴파일을 위해 쓰는 유니티의 태그 같은 기능

==========================
대표적으로 사용되는 C# 전처리기 코드
-------------------------------------------------
|종류 |---------------------|내용|---------------|예제|
#define		심볼에 대한 정의		#define BUG_FIX
		유니티에서는 player settings
		에서 설정을 진행하거나
		유니티 6 이상의 버전에서는 
		Build profile의 Scripits Defines에 저장
# if 심볼명	심볼이 정의되어 있을 경우
		해당 위치의 코드 활성화

#else 		정의가 안된 경우 해당 위치의 코드 비활성화
#elif		다른 조건 확인
#endif		if의 마지막으로 반드시 작성해야 하며, 사용이 마무리됨을 안내함

#region, endregion 스크립트 코드에 대한 접기 영역을 만듦
#udedg 		심볼에 대한 제거

# warnning 	조건에 따라 컴파일 경고를 발생

#error 		 조건에 따라 컴파일 에러를 발생
	





1) player Setting에서 설정하는 방법
Edit --> player Settings--> player
other settings  --> Script Compliation에 리스트로 등록

2) Build Profies의 Add Build profile로 전용빌드를 하나 만들어주고
sctiptting Defting에 리스트로 등록할 경우
해당 환경에서만 심볼이 등록되게 정의한다.

심볼 정리할 떄는 일반적으로 영대문자를 설치하는 방법
Ex) UNITY _AndRoID_7

----------------------------------------------------------

player Settings에서 설정하는 값

1.CompanyName : 레지스트리 저장소
2.Product Name : 프로젝트 / 게임 / 앱의 이름
3.Version : 현재의 파일 버전

ICON:     플랫폼 별 아이콘을 설정하는 기능
	모바일 작업에서는 필수적으로 진행해줍니다.
Cursor : 프로그램 내부에서 사용할 커서의 이미지

--> 기본 이미지를 설정할 수 있습니다.

Resolution & Presentation 설정
Run IN Background
해당 설정을 킬 경우, 유니티 화면에서 벗어나도 실행

FullScreen Mode :  해상도 설정

Standalone 기준 설정
(유니티에서 빌드할 수 있는 PC환경용 앱)
Windows, macOS, Linux

1.플레이어 로그 파일 생성 여부
2. 창 크기 조절 기능 여부
3. 게임 창 포커스를 잃어도 렌더링할 지에 대한 여부
4. alt + enter로 전체화면 기능을 제공할 지에 대한 여부
5. 멀티 플레이 환경에서 첫번째 화면만 사용할 지에 대한 여부
6. 고급 렌더링 여부

Splash Image

앱 실행 시 최초로 보여지는 인트로 화면 설정 메뉴

이미지 필요
로고 : 화면에 모이는 메인 이미지
백그라운드 : 배경 이미지

에디터에서는 preview를 통해 기능 체크 가능

로고 기능에서 Show Unity Logo를 제거하면
유니티 로고가 나오지 않음.

단 로고 리스트에 로고가 추가가 되어 있을 것

로고와 백그라운드로 사용하는 이미지는 Sprite 설정을
해줘야 사용 가능합니다.

배경설정 : 배경 위에 덮이는 오버레이의 투명도 설정

블러 : 뒷 배경 흐리게 설정합니다.

Alternate Portait Image : 세로 방향에서 실행되는

---------------------------------------------------

1. 로고 + 백그라운드로 시작 시의 이미지 설정

2. 타이틀 씬
	-게임 시작
	-게임 종료 ( Application.Quit())

3. 게임 씬 이동
	-타이틀로 돌아가기 기능 추가
	-랜덤으로 화면에 나오는 퀴즈를 맞춥니다.
	퀴즈 정답은 유니티 내부에서 SO로써 저장되있을 것
	-맞출 경우 다음 스테이지 이동과 타이틀로
	  돌아가기 중 하나를 선택합니다.
4. 스테이지 이동 ( 여러개 가능) 


















































































