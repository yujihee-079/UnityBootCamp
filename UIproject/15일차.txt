지난 시간 리뷰

1. SceneMavager.LoadScene("씬 이름");
해당 기능을 호출하면 다음 씬으로 이동됩니다.

File -> Build Profiles -> Scene List
에 씬이 등록되어 있는 상태일 경우 사용 가능


2. Canvas : UI 작업을 위해 반드시 필요한 오브젝트,
UI에서 다루는 값(버튼, 이미지)등은 캔버스의 자식으로써 
사용.

3. 입력 모듈(키보드, 마우스)로 인한 입력 전달

--> 이벤트 확인
--> 기능 수행

4. #if UNITY_EDITOR // 유니티 엔진보다 먼저 사용.
EditorApplication.Exit(0);
유니티 에디터 종료
EditorApplication.isPlaying = false;
유니티 에디터의 게임 모드에 대한 종료.
#endif

-------------------------------------------------------

텍스트 타이핑 효과를 이용해서 
간단한 대화 프로그램 만들기

Canvas 생성(DialogUI)
// 인스펙터에서 사용.
- panel 생성
(Rext가 stretch로 설정되어 있고,
 color의 Alpha 값이 투명하게 설정되어 있는
 Image)
-Name
-Message

레이아웃 배치 
(레이아웃 기능을 붙이면 자식 오브젝트에 대한 배치를
간단히 진행할 수 있습니다.) 배치가 끝나면 해당 기능을 
제거해주세요.

-Panel
(Componet) Vertical Layout Group 연결

** 
Vertical // Horizontal // Grid

Child Alignment : 자식에 대한 정렬 위치
padding을 통해 오브젝트 배치 위치 설정
spacing을 통해 다음 값과의 간격 설정

런타임에서 Layout의 요소가 변경되지 않는 경우라면 Group은
정렬용으로만 사용하고 이후 제거하는 방식을 선택해주면 됩니다.
---------------------------------------------------
 @@ DialogManager.cs 생성
using TMPro; // TMP_Text 사용
using System.Collections.Generic; //Queue<T> 사용
using System.Collections; //IEnumerator 사용
using System.Text; //StringBuilder 사용

필드(public)
-텍스트 (TMP ) 대화 텍스트
-텍스트(TMP) 대화 캐릭터 이름
-패널(GameObject)
-타이핑 속도(float)

필드 (private)
-Queue<T> : 대화 내용 큐
- Coroutine : 타이핑에 대한 코루틴
- bool : 타이핑 진행 여부 체크
-Dialog : 대화 내용 ( 큐에 등록)


----------------------------------------------------
Queue

선입 선출 구조로 설계되어 있는 자료구조
(First - in First - Out) FIFO

--> 먼저 넣어준 데이터가 먼저 제거되는 방식
(대화, 대기열 등의 기능을 구현할 떄 우선적으로
고려되는 자료구조)

특징
Enqueue(값) (큐의 뒷쪽) 데이터 추가

Dequeue (큐의 앞쪽) 가장 먼저 들어온 값 삭제

Peek(): 현재 가장 먼저 들어와있는 값 확인 가능

Count(): 현재 큐에 등록된 요소의 개수

ex)
Queue<string> message = new Queue<string>(); // 큐 생성
message.Enqueue("오늘의 추천 메뉴는...");
message.Enqueue("바나나맛 우유입니다.");

string data = message.Dequeue(); 
//첫번째 대사인 "오늘의 추천 메뉴는..."이 return 되고, 큐 내부에서 삭제됩니다.
-------------------------------------------------------

StringBuilder
: 해당 클래스는 
System.Text.StringBuilder 클래스는
문자열을 효율적으로 다룰 수 있게 도와주는 
클래스 입니다

사용 목적

C#의 string은 한번 생성되면 수정이 불가능합니다.
(immutable object)

문자열의 경우 + 연산이 진행되면 새로운 문자열을
생성하는 구조

StringBuilder의 경우는 내부에 있는 버퍼에 의해
문자열을 누적해서 수정할 수 있습니다.

버퍼 = 임시 저장소

시네마틱 영상 대화 호출 또는 미연시 대화처럼 많은 대화일 떄

@@무슨 기능을 가지고 있느냐?

1) 문자열 결합 Append()

2) 문자열 + 줄바꿈 AppendLine()

3) 원하는 위치에 문자열 삽입 Insert()

4) 인덱스 기준으로 문자열 삭제하기 Remove()

5) 특수 문자를 다른 값으로 교체하기 Replace()

6) 문자열 전체 제거 Clear()

7) 결과물로 변환 ToString()


성능에 대한 비교
 String에서의 + 연산 과정 vs StringBuilder
 |--------------------------|-----------------------|
 작업량 적을 경우          | 작업량 많을 경우      |
 Gc 발생량 많음            | GC발생 적음           |
                               실시간 조작 여부:
                                최적화 단계에서 더 유리|
      
========> c# 교과서 샘플 예제 존재) 25. 문자열 다루기 310p~321p

# 핵심 공부 데이터
기본 데이터 (primitive) : bool, float, int....
문자열 : String
배열: []
클래스 : Class
자료구조 : List, Queue, Stack, Dictionaty

------------------------------------------------------
매니저 코드란? (Manager)

특저 기능이나 시스템을 중앙에서 관리하는 스크립트 또는 객체

대규모의 게임, UI, 데이터 공유 등에서 사용되는 핵심 역할

목적)
오브젝트나 시스템들을 한 곳에서 관리하는 용도
각 오브젝트가 개별적으로 로직을 처리하는 것이 아닌
매니저를 통해 해당 기능을 위임합니다.

다른 씬에서도 재사용이 가능한 용도로도 설계됩니다.
(씬 간의 데이터를 유지)

대표적인 예시)
1.
GameManager : 게임 시작, 종료, 정지, 씬 전환 등을 관리 
2.
UIManager: UI창에 대한 열고 닫음
3.
SceneManager : 유니티에서 제공해주는 이 기능은
           	         씬에 대한 로딩, 전환 등을 관리합니다.

매니저의 설계 방식 (Singleton)
>> 프로그램 전체에서 단 하나의 인스턴스만 존재하도록
보장하는 설계 방식

instance란?
클래스에서 만든 데이터 결과물

대화 사용
1.
 ex) 플레이어와 특정 NPC등이 충돌 할 경우 대화 시작(트리거)
2. 
 ex) 마우스 클릭으로 NPC를 클릭하면 대화 시작

1번 과제

2번 작업 진행

목표) 
	마우스로 오브젝트를 클릭해서 레이어 식별을 통해 "NPC"면 대화 창 뜨게
	NPC는 고유한 이름과 대화 내용을 가지고 있습니다.
	UI를 클릭하는 상황이라면 NPC의 클릭은 무시되도록 처리

1. 매니저의 기능 수정 및 추가

2. 대화 관련 마우스 스크립트 설계	

-DialogueManager : UI 클릭 중이라면 대사 넘기기를 무시하는 기능 추가
if (Input.GetKeyDown(KeyCode.Space))
{
    //이벤트 시스템에 전달된 값이 존재하고, 그 값이 UI위에서 눌려진 상황이라면?
    if (EventSystem.current != null && EventSystem.current.IsPointerOverGameObject())
    {
        //작업 안함
        return;
    }
...

- D(Dialogue)MouseRaycaster : 마우스 충돌 시의 대화 시작 기능(카메라에 연결)
- DTrigger : 오브젝트에 연결해 Inspector에서 대사를 등록하는 기능

사전 준비할 내용?

오브젝트 (콜라이더 + DTrigger 연결)
카메라(DMousueRaycaster 연결)
오브젝트(DialogueManager 연결)
레이어 설정 (NPC)
이벤트 시스템 씬에 존재해야 함

----------------------------------------------------------------

Dialog Manager Speed 0.1~1 사이의 값으로 넣어줄 것(대기시간)


유니티 DropDown
사용자가 리스트에서 하나의 항목을 선택할 수 있는
메뉴의 형태를 가진 UI요소

사용자에게 여러 옵션 중에 하나만 선택할 수 있는 용도

선택된 값을 통해 스크립트에서 값 변경을 제어

주로 사용되는 예시)

캐릭터 직업 선택

게임 난이도 선택

해상도 선택

언어 선택....
/////
드롭다운 공식 문서
https://docs.unity3d.com/kr/2021.3/Manual/script-Dropdown.html

Label <- 드롭 다운에서 선택된 값에 대한 텍스트

Template -> Item Label : 드롭 다운 목록에 대한 텍스트

드롭다운 설정
1. 인스펙터에서 Options에 대한 등록을 진행할 수 있습니다.

오늘 수업 마무리

문자열에 관련된 작업 (StringBuilder 클래스 사용)

드롭 다운에 대한 예시

다이얼로그 예제
ㄴ Queue <T> , Coroutine

클래스를 활용한 프로그램 구현.

핵심 데이터가 정해지면 그 데이터를 기반으로
프로그래밍을 진행할 수 있어 구조 파악이 쉽고
고치기도 쉬운 방식 ( 객체 지향 프로그래밍 )

---------------------------------------------------------

드롭다운 설정
1. 인스펙터에서 Options에 대한 등록을 진행할 수 있습니다.

연습 문제)

드롭 다운을 이용해서 플레이어 설정을 진행하는
프로그램을 구현하고자 합니다.

플레이어에 대한 정보는 클래스로 따로 설계해주세요.

둘 중 하나로 구현합니다.
1. 옵션을 골랐을 경우 바로 값이 화면에서 변경됨이
   보이게 한다.

2. 버튼을 활용해 적용을 누르면 고른 옵션으로
   값이 변경됨을 보이게 한다.























































































