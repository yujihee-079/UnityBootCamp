14일차

오전 : Ui에 관련된 내용들 소개

오후 : 이벤트 트리거

** Notion 사용법
디스코드 공지사항 링크 들어가서 자신의 노션에 복제.

UIProject
Text(Legacy)
Image
Button(Legacy) 생성

Canvas 여러개 사용 권장. 역할 별로 나눈다.

ui 제작에서 사용되는
ui가 놓이는 장소

모든 ui컴포넌트는 이 캔버스의 자식입니다

ui를 만들 때 너무 많은 컴포넌트들을 하나의 캔버스 쪽에
몰아주면 그만큼 부담이 심해집니다.

--> 캔버스 내부의 ui가 변경이 될 경우 
전체 캔버스를 기준으로 다시 렌더링을 하는 방식

ex) 체력바, 인벤토리, 채팅창 같은 변화 빈도가 있는 값
들을 대상으로는 캔버스를 따로 설계하는 것이 좋습니다.

Pixel perfect 기능은 선명도를 올려주는 기능입니다.
대신 성능이 떨어질 가능성이 있습니다.

UI 내에서는 최대한 동일한 머티리얼과 텍스처를 공유하는
것이 좋습니다.

--> 드로우 콜에 대한 병합 가능 ( 드로우 콜은 
CPU가 GPU에게 보내는 렌더링 명령을 의미합니다.
게임 뷰의 Batch가 드로우 쿨이다.

그래픽 레이캐스트(graphic Raycast)
: 버튼처럼 반드시 필요한 경우가 아니라면, 이 레이캐스트의
타겟으로 설정하는 것은 불필요함으로 설정해제를 합니다.

성능 단계별 학인(UI)
Window -> Analysis -> Profiler

Ui에서는 프로파일링 작업중에서
UI.InputModule.Process()
EVentSystem.Update()
GraphicRaycaster.Raycast()가
프로파일러에서 CPU 비율을 많이 차지하는지 파악하고 줄여나갑니다.
----------------------------------------
3교시 : 버튼(입력) + 이벤트 시스템 => 기능

Bg - Image
 
Text - Text  (버튼 눌렀을 때의 적용될 텍스트)
Button - Button(클릭용 도구)
Icon - Image(이미지 표현)
IconText - Text (버튼 눌렀을 때의 적용될 텍스트)


준비된 이미지를 다운 받아줍니다.


따로 이미지 사용하실 분들
이미지 뒷배경 제거 사이트 remove.bg

스크립트 만들기
UpgradeUI : 업그레이드에 대한 기능
UnitStat : 유닛의 능력치



 c# 배열이 참조형으로 사용됨.
---------------------------------------------
const 불가능(컴파일 형태가 아님)
readonly로 대체(상수처럼 쓰기 위해서)
초기화 1회 후 변경 불가 설정
static 써서 정적으로 사용할 수 있게 
static readonly <-
---------------------------------------------


점심 이후 1시부터 진행

과제 UnitStat.cs 파일에는 강화하는 유닛에 대한
정보가 저장되어있습니다.

UnitInventory.cs 에는 강화를 위한 금액, 강화를
위한 재료들이 존재합니다.


Sample.cs를 활용해 문자열을 구분자 기준으로 나누는
작업을 확인할 수 있습니다.

UpgradeUI는 유닛의 스탯과 유닛의 인벤토리의 정보를
가지고, 업그레이드를 진행할 수 있게 변경해주세요.


-----------------------------------------

새 씬 생성
StartScene
기본적인 시작메뉴에 대한 설계

UI
-Background(이미지)
Text(TMP)

유니티에서 제공하는 고급 첵스처
렌더링 시스템으로, 기본 텍스트보다
더 많은 기능들을 제공하고 있음.
주로 3D환경에서의 텍스트 표현

전체화면
대화창 깔끔하게 나올려는 목적

Window -> TextMeshpro -> Font Asset Creator






























